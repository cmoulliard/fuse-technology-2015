:footer_copyright: Copyright Â©2015 Red Hat, Inc.
:project_dir: /Users/chmoulli/MyProjects/MyConferences/fuse-days-2014
:resourcesdir: /Users/chmoulli/MyProjects/MyConferences/fuse-days-2014/slideshow/snippet/src/main/resources
:sourcesdir: /Users/chmoulli/MyProjects/MyConferences/fuse-days-2014/slideshow/snippet/src/main/java/
:imagesdir: images/
  
:author: Charles Moulliard (@cmoulliard)
:blog: http://cmoulliard.github.io
:title-author: {title} {author}
:talk-title: Hawtio - Modular web console for managing Java stuff
:talk-date: 22th of April - 2015
:title-speaker: Principal Solution Architect, Apache Committer
:twitter: cmoulliard

[data-background="images/redhat-mw-logo-background.png"]
//[data-background="images/redhat-logo-background-1024-768.png"]
// [data-background="images/redhat-logo-background-1280-800.png"]
== &nbsp;

[.cover]
--
*{talk-title}*

[.newline]
{author} +
{title-speaker}
[.newline]
{talk-date}
--
// ************ Hawtio *************

== http://hawt.io[Hawt.io]

[.noredheader,cols="55,45"]
|===
| .2+|image:hawtio/hawtio_logo.svg[float="right",width="100%"]
image:hawtio/hawtio-project.png[]
a|* *OpenSource* project - Apache License
* Birthdate : Nov 18, 2012
* Pluggable & **modular** **web console** for managing Java **MBeans** and more ...
|===

// ************ Hawtio *************
== JMX Tools

[.noredheader,cols="40,60"]
|===
| .2+| image:hawtio/jsoncole.png[float="left",width="100%"]
a|* JConsole, VisualVM +++<i class="fa fa-arrow-right"></i>+++ Developers tool (+++<i class="fa fa-ambulance"></i>+++)
* Proprietary `com` protocol (RMI/IIOP) +++</p></p>+++
image:hawtio/visualVM.png[float="right",width="100%"]
|===

* Command line tools +++<i class="fa fa-arrow-right"></i>+++ jmxclient, jmxterm, mx4j
* Not so user friendly : +++<i class="fa fa-frown-o"></i>+++

// ************ Hawtio *************
== http://jolokia.org[Jolokia ?]

[.noredheader,cols="60,40"]
|===
a|* Command line tools +++<i class="fa fa-arrow-right"></i>+++ jmx4perl, j4psh
 * JMX / HTTP Bridge
 * REST API : read attributes, execute operations +++<i class="fa fa-smile-o"></i>+++
|image:hawtio/jolokia.png[float="right",width="65%"]
|===

//[source,html]
//----
//http://localhost:9090/hawtio/jolokia/exec/org.apache.camel:context=camel-1,name=%22route1%22,type=routes/dumpStatsAsXml%28boolean%29/true
//----

image:hawtio/rest-api-jolokia-2.png[]

// ************ Hawtio *************
== Demo

[.newline]
* Command line Tool : j4psh
* HTTP Get request to read attribute
* HTTP Get request to exec an operation

// ************ Hawtio *************
== Move to HTML Architecture

[.newline]
* Hawtio *=* A combination of the most *powerful web* technologies

* image:web2/html5.jpeg[100,100] +++<i class="fa fa-plus"></i>+++ image:web2/javascript.jpeg[100,100] +++<i class="fa fa-plus"></i>+++ image:hawtio/AngularJS-small.png[] +++<i class="fa fa-plus"></i>+++ image:web2/rest-api.png[100,100] +++<i class="fa fa-plus"></i>+++ image:hawtio/jolokia.png[200,200]

[.newline]
** Front end : HTML5 with *AngularJS* & **JSON / REST**
** Backend : Java Servlet & **Jolokia** JMX gateway

// ************ Hawtio *************
== What Front looks like

image:hawtio/hawtio-console.png[]

// ************ Hawtio *************
== Communication ...

** *Web* client communicates to Jolokia *agent* over HTTP(S)
** Send Messages represented in *JSON* Format to Jolokia REST Servlet
** Jolokia *translates* the request/response & map the JSON payload with JMX Calls

image:hawtio/hawtio-sequence.png[]

// ************ Hawtio *************
== Domain

[.noredheader]
|===
| .2+|image:hawtio/hawtio-tomcat-mbeans-applications.png[]
a|* JMX Domain / context
** java.lang, com.sun.management, java.util
** org.apache.camel
** io.hawt
** ...
* Attributes & operations
|===

// ************ Hawtio *************
== Plugin

[.noredheader,cols="25,75"]
|===
| .2+|image:hawtio/hawtio-tomcat-applications.png[width="100%"]
a|* What is a *plugin* ?

* +++<i class="fa fa-arrow-right"></i>+++
[.newline]
* Collection of UI
* JSON request(s)/response(s)
* JS lib to do the rendering
|===

// ************ Hawtio *************
== Plugin Front

* Mix of HTML tags & angular directives *`ng-*`*

[source, html]
----
<div class="row-fluid" ng-controller="Tomcat.TomcatController"> <!--1-->
  <div class="row-fluid">
    <div class="pull-left">
      <form class="form-inline no-bottom-margin">
        <fieldset>
          <div class="controls control-group inline-block controls-row">
            <div class="btn-group">
              <button ng-disabled="selected.length == 0" class="btn" ng-click="start()" title="Start"><i
                      class="icon-play-circle"></i></button>
              <button ng-disabled="selected.length == 0" class="btn" ng-click="stop()" title="Stop"><i
                      class="icon-off"></i></button>
              <button ng-disabled="selected.length == 0" class="btn" ng-click="reload()" title="Refresh"><i
                      class="icon-refresh"></i></button>
              <button ng-disabled="selected.length == 0" class="btn" ng-click="uninstallDialog.open()" title="Uninstall"><i
                      class="icon-eject"></i></button>
            </div>
          </div>
        </fieldset>
      </form>
----
// * Angular Controller +++<i class="fa fa-circle fa-stack-2x"></i><i class="fa fa-inverse fa-stack-1x">1</i>+++
<1> Angular ng-controller defined within HTML <div> tag

// ************ Hawtio *************
== Plugin Controller

[source, javascript]
----
module Tomcat {
  var pluginName = 'tomcat';
  export var _module = angular.module(pluginName, ['bootstrap', 'ngResource', 'ui.bootstrap.dialog', 'hawtioCore']);

  _module.config(["$routeProvider", ($routeProvider) => {
    $routeProvider.
      when('/tomcat/server', {templateUrl: 'app/tomcat/html/server.html'}).
      when('/tomcat/apps', {templateUrl: 'app/tomcat/html/apps.html'}). <!--1-->
      when('/tomcat/connectors', {templateUrl: 'app/tomcat/html/connectors.html'}). <!--2-->
      when('/tomcat/sessions', {templateUrl: 'app/tomcat/html/sessions.html'});
  }]);
----
<1> Map HTTP request with `applications` HTML page
<2> Idem for the `connectors` page

// ************ Hawtio *************
== Jolokia Request

* Javascript function called to execute a GET request of type *`exec`* or *`read`*
* Mbean & Attributes OR Operation are passed as parameters
* `onSuccess` +++<i class="fa fa-arrow-right"></i>+++ calls function for the rendering

[source, javascript]
----
jolokia.request({
        type: 'exec',
        mbean: id,
        operation: op,
        arguments: null
    },
    onSuccess($scope.onResponse, {error: $scope.onResponse}));
----
// <1> A typical Jolokia Request

// ************ Hawtio *************
== Jolokia Search

* Search operation is supported
* Find MBeans according to a search *`query`* based on the type of the MBean to find

[source, javascript]
----
function loadData() {
  var connectors = jolokia.search("*:type=Connector,*"); // <1>
  if (connectors) {
    var found = false;
    angular.forEach(connectors, function (key, value) {
      var mbean = key;
      if (!found) {
        var data = jolokia.request({type: "read", mbean: mbean, attribute: ["port", "scheme", "protocol"]});
...
  jolokia.search("*:j2eeType=WebModule,*", onSuccess(render)); // <2>
}
----
<1> A search query to find the type `Connector`
<2> Anoter search query for mbeans based on the type `"*:j2eeType=WebModule,*"`

// ************ Hawtio *************
== Jolokia Response

[source, javascript]
----
function render(response) { // <1>
   response = Tomcat.filerTomcatOrCatalina(response);

   $scope.webapps = [];
   $scope.mbeanIndex = {};
   $scope.selected.length = 0;

   function onAttributes(response) {
     var obj = response.value;
     if (obj) {
       obj.mbean = response.request.mbean; // <2>
       var mbean = obj.mbean;

       // compute the url for the webapp, and we want to use http as scheme
       var hostname = Core.extractTargetUrl($location, $scope.httpScheme, $scope.httpPort);
       obj.url = hostname + obj['path'];
----
<1> Response rendered & parsed
<2> JSON result mapped with angular objects *`$scope.*`*

// ************ Hawtio *************
== Plugins

* *Plug-an-play* architecture ( > 25 plugins )
* UI updated in *real time*
* Some are *Packaged* : jvm, threads, dashboard, camel, activemq, ...
* Some are *Server side* : git, maven, aether, log desiged
* Some are *External* : insight, elasticsearch, kibana
* *Reusable* for developers (branding, datatable, forms, ide, perspective, tree, ui)

// ************ Hawtio *************
== Example - camel

image:fuse/hawtio-3.png[width="75%"]

// ************ Hawtio *************
== Another example - ActiveMQ

image:fuse/hawtio-4.png[width="65%",height="65%"]
image:fuse/hawtio-5.png[width="65%",height="65%"]

// ************ Hawtio *************
== Demo

* Have a look to Tomcat plugin
* Backend - jolokia mbean requests

// ************ Hawtio *************
== Hawtio Features

* +++<i class="fa fa-exclamation"></i>+++ Container *agnostic* & can be used +++<i class="fa fa-cog fa-spin"></i>+++ :
  ** *Standalone* mode
  ** *Embedded* mode
  ** *Deployed* in a *Web*, *Application* container
  ** Deployed in an *OSGI* container
* Supports *JAAS* authentication
* Offer *local* & *remote* connection (Alternative to https://jcp.org/en/jsr/detail?id=160[JSR-160])
* Heart of the **new** **F**use **M**anagement **C**onsole

// ************ Hawtio *************
== Demo

[.newline]
* Show hawtio - embedded mode
* Connect remotely using Jolokia agent / JAAS

// ************ Hawtio *************
== Features - con't

* *Wiki* editor : Markdown, HTML, XML, Form, Properties, Camel, Dozer for Java to Java mapping ...

image:hawtio/wiki-xml.png[]

// ************ Hawtio *************
== Features - con't

* Config/Resources/Content are *Git* manageable
* Support Compare/Revert

image:hawtio/git.png[]

// ************ Hawtio *************
== Demo

[.newline]
* How can I use Wiki editor
* Resources managed with GIT repo

// ************ Hawtio *************
== Design your own Dashboard

[.newline]
* Demo
** Add View - Operating System
** Add Donut - Heap Memory
** Add Area Chart - SystemCPU Load
** Add log, threads, ...

// ************ Hawtio *************
== Create your own Plugin

[.newline]
* Requires to *register* **io.hawt.web.plugin.HawtioPlugin** MBean class
  & parameters
** Context
** JS Scripts location
** Name and domain (used by controller)
* Web project *packaged* as war or bundle

// ************ Hawtio *************
== My Plugin

* HawtIoPlugin can be instantiated using IoC (Blueprint, Spring, ...) or Java Servlet
* Parameters are defined as variables

[source, xml]
----
include::{resourcesdir}/OSGI-INF/blueprint/blueprint2.xml[]
----

// ************ Hawtio *************
== My Plugin

* Define some MBeans with attributes & operations
* Example +++<i class="fa fa-arrow-right"></i>+++ userInfo(String), searchTweets(String)

[source, java]
----
include::{sourcesdir}/my/cool/demo/SocialMedia.java[tag=snippetService]
----

// ************ Hawtio *************
== My Plugin

* Design Front end with your directives : *ng-controller*, *ng-submit*, *ng-model* & *ng-grid*

[source, xml]
----
include::{resourcesdir}/searchtweets.html[]
----

<1> A social plugin to search tweets

// ************ Hawtio *************
== My Plugin

* Create the different JS functions to query, request, search, ...

[source, javascript]
----
include::{resourcesdir}/socialPlugin.js[tag=snippetController]
----
<1> Jolokia request to search `Tweets` using as operation type `searchTweets`

// ************ Hawtio *************
== My Plugin DEMO

image::fuse/plugin-query.png[]
* Deploy and enjoy your plugin image:clapping_hands_sign.svg[200,200] !

// ************ Hawtio *************
== Questions

[cols="45,.<55"]
|===

.2+|image:questions.png[]
a|* Twitter : @cmoulliard
|===

* More info +++&nbsp;<i class="fa fa-arrow-right"></i>&nbsp;+++
  - link:hawt.io[hawt.io]
  - link:www.jboss.org/products/fuse.html[www.jboss.org/products/fuse.html]
  - link:https://github.com/cmoulliard/fuse-days-2014/tree/master/demos/hawtio-embedded[Code of the hawtio embedded demo]